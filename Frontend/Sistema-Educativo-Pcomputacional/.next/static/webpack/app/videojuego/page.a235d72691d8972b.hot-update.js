"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/videojuego/page",{

/***/ "(app-pages-browser)/./src/MapsGenerator.tsx":
/*!*******************************!*\
  !*** ./src/MapsGenerator.tsx ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_generarSiguienteNumeroValido__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/generarSiguienteNumeroValido */ \"(app-pages-browser)/./src/utils/generarSiguienteNumeroValido.ts\");\n\n/* Bitacora de Luis (Nota número 1 para mi amorcito): Empecé a comentar las secciones de código que he hecho para explicarte que \r\n    voy haciendo mi amor precioso, así vas entendiendo que es lo que busque lograr con cada implementación y tengas una base para explorar\r\n    todas las funciones del código.\r\n    \r\n    La función \"generarEsquemaMapa() se encarga de leer las representaciones del mundo generadas por Tiled (en formato JSON) para imprimir ese mapa\r\n    en la pantalla. Estos mapas contienen propiedades importantes (a las que puedes acceder con punto al ser objetos, ejemplo: world.layer.data), entre ellas\r\n    las más importante es la propiedad \"layers\" que contiene todas las capas de ese mundo, así mismo, cada capa tiene un atributo \"data\" que contiene el ID \r\n    de cada fracción de imagen que se genera cuando cargamos el conjunto de patrones en Tiled.\r\n\r\n    \r\n    */ const TILED_WIDTH_NUMBER = 20;\nconst TILED_HEIGTH_NUMBER = 15;\nconst generarEsquemaMapa = async (contextoKaplay, configuracionMapa, urlMapa, informacionMapa //Contiene en orden todas las imagenes que se utilizaron en cada capa para generar el mundo.\n)=>{\n    const resultado = fetch(urlMapa).then((res)=>res.json()).then((worldJson)=>{\n        console.log(\"\".concat(configuracionMapa.nameFolder, \"/\").concat(configuracionMapa.nameFile));\n        contextoKaplay.loadSprite(\"mundo\", \"\".concat(configuracionMapa.nameFolder, \"/\").concat(configuracionMapa.nameFile), {\n            sliceX: 1,\n            sliceY: 1\n        });\n        contextoKaplay.onDraw(()=>{\n            contextoKaplay.drawSprite({\n                sprite: \"mundo\",\n                width: window.innerWidth,\n                height: window.innerHeight\n            });\n        });\n        //Extraemos los arreglos que contienen el firtsgid (Posición donde comienzan cada una de las imagenes de cada capa)\n        const tilesetOrder = informacionMapa;\n        console.log(tilesetOrder);\n        //cargamos todas las texturas que seran usadas para generar el mapa en orden\n        const spritesCargados = [];\n        informacionMapa.forEach((informacionNivel, index)=>{\n            spritesCargados.push(contextoKaplay.loadSprite(\"tiles-\".concat(index + 1), informacionNivel.urlTextura, {\n                sliceX: informacionNivel.dimensionTexturasX,\n                sliceY: informacionNivel.dimensionTexturasY\n            }));\n        });\n        const anchoCuadrado = window.innerWidth / worldJson.width;\n        const altoCuadrado = window.innerHeight / worldJson.height;\n        const tileMap = [\n            {}\n        ];\n        const valoresProhibidos = [\n            39,\n            48,\n            49,\n            50,\n            51,\n            52,\n            53,\n            54,\n            55,\n            56,\n            57\n        ];\n        const mapaGenerado = worldJson === null || worldJson === void 0 ? void 0 : worldJson.layers;\n        //Luego para cada CAPA que contiene números que no pueden ser procesados por el generador de niveles\n        //Es necesario que realizacemos una reasignación con un caracter ASCII, tomando en cuenta que hay caracteres que \n        //No pueden ser procesados como una cadena (Valores Prohibidos)\n        mapaGenerado.forEach((layer, numeroLayer)=>{\n            //Para cada capa inicializamos un contador que contiene el código ASCII del \"$\" para reemplazarlo en el caso de que el número\n            //extraido sea mayor a 9\n            let contador = 36;\n            if (layer.type === \"tilelayer\") {\n                //Luego por cada uno de los números que representan una capa realizamos lo siguiente:\n                layer.data.forEach((tileNumber, index)=>{\n                    //Validamos que el TileMap el cual contiene una relación llave valor con el caracter \n                    //y su equivalente en la capa, por ejemplo $: 36, esté inicializado.\n                    if (!(numeroLayer >= 0 && numeroLayer < tileMap.length)) {\n                        tileMap.push({});\n                    }\n                    //Si el \"Tilemap\" en la capa actual no ha mapeado el número\n                    if (Object.values(tileMap[numeroLayer]).includes(tileNumber) === false) {\n                        //Validmos si es un número de dos dígitos y en caso de que lo sea, debemos validar el\n                        //ultimo valor posible del contador.\n                        contador = (0,_utils_generarSiguienteNumeroValido__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(contador, valoresProhibidos);\n                        //Una vez validado, si el número a evaluar es de dos digitos y el contador está entre\n                        //los numeros validos\n                        if (tileNumber.toString().length > 1 && contador >= 33 && contador <= 165) {\n                            //Al mapeo de la capa evaluada le asignamos una correspondencia entre el valor ASCCI y el numero\n                            tileMap[numeroLayer][String.fromCharCode(contador)] = tileNumber;\n                            //Actualizamos el mapa de la misma posicion con el nuevo caracter\n                            worldJson.layers[numeroLayer].data[index] = String.fromCharCode(contador);\n                            //Avanzamos el contador para tomar el nuevo valor ASCII\n                            contador++;\n                        } else if (contador > 165) {\n                            //En caso de que el contador haya superado el límite de asignaciones\n                            throw new Error(\"La cantidad de cuadros a superado el limite establecido\");\n                        } else {\n                            //Si el mapeo realizado es de un número de un sólo digito entonces asignamos directamente ese numero \n                            tileMap[numeroLayer][tileNumber.toString()] = tileNumber;\n                        }\n                    } else {\n                        var _Object_entries_find;\n                        //En la caso de extraer un número que ya ha sido mapeado y ya tiene asignado un valor ASCII\n                        //Buscamos la llave a la que le corresponde ese valor\n                        //Y actualizamos el mapa con ese caracter encontrado.\n                        const keyEncontrada = (_Object_entries_find = Object.entries(tileMap[numeroLayer]).find((param)=>{\n                            let [_, value] = param;\n                            return value === tileNumber;\n                        })) === null || _Object_entries_find === void 0 ? void 0 : _Object_entries_find[0];\n                        worldJson.layers[numeroLayer].data[index] = keyEncontrada;\n                    }\n                });\n            }\n            //let tamañoCuadro = window.innerWidth / 20\n            //let cuadroPosicion = zonaColision.x / 32\n            let proporcionX = window.innerWidth / (32 * TILED_MAP__WIDTH_NUMBER);\n            let proporcionY = window.innerHeight / (32 * TILED_HEIGTH_NUMBER);\n            if (layer.type === \"objectgroup\" && layer.name === \"colisiones\") {\n                layer.objects.forEach((zonaColision, numeroColision)=>{\n                    //if(numeroColision === 4){\n                    // Zona de caid\n                    console.log(zonaColision.width);\n                    let caida_ = contextoKaplay.add([\n                        contextoKaplay.pos(zonaColision.x / 32 * (window.innerWidth / 20), Math.floor(zonaColision.y / 32 * (window.innerHeight / 15))),\n                        contextoKaplay.scale(1),\n                        contextoKaplay.body({\n                            isStatic: true\n                        }),\n                        contextoKaplay.area({\n                            shape: new contextoKaplay.Rect(contextoKaplay.vec2(0.0), zonaColision.width / 32 * (window.innerWidth / 20), zonaColision.height * proporcionY) // Rectángulo más pequeño\n                        }),\n                        {\n                            width: zonaColision.width * proporcionX,\n                            height: zonaColision.height * proporcionY\n                        },\n                        //`square-${numeroColision}`,\n                        \"square-colision\"\n                    ]);\n                //}\n                });\n            }\n            if (layer.type === \"objectgroup\" && layer.name === \"player\") {\n                // Jugador\n                const player = contextoKaplay.add([\n                    contextoKaplay.pos(layer.objects[0].x / 32 * (window.innerWidth / 20), layer.objects[0].y / 32 * (window.innerHeight / 15)),\n                    contextoKaplay.sprite(\"knight\"),\n                    contextoKaplay.scale(1),\n                    contextoKaplay.health(3),\n                    contextoKaplay.area(),\n                    \"player\",\n                    {\n                        z: 1\n                    } // Asegura que el jugador esté en una capa superior\n                ]);\n                player.tag(\"player\");\n            }\n            if (layer.type === \"objectgroup\" && layer.name === \"enemy\") {\n                // Jugador\n                // Enemigo\n                const enemy = contextoKaplay.add([\n                    contextoKaplay.pos(layer.objects[0].x / 32 * (window.innerWidth / 20), layer.objects[0].y / 32 * (window.innerHeight / 15)),\n                    contextoKaplay.sprite(\"enemy\"),\n                    contextoKaplay.scale(0.8),\n                    contextoKaplay.area(),\n                    contextoKaplay.body(),\n                    \"enemy\",\n                    {\n                        z: 1\n                    } // Asegura que el jugador esté en una capa superior\n                ]);\n                enemy.tag(\"enemy\");\n            }\n        });\n        const tileMapping = [];\n        //Una vez realizada la asignación entre valores ASCII y valores númericos del mapa\n        //Es necesario asignar a un SPRITE a cada uno de esos valores, por lo que para\n        //lograrlo hacemos lo siguiente:\n        tileMap.forEach((layer, numeroLayer)=>{\n            //Para cada valor ASCII de la capa que se está evaluado hacemos lo siguiente\n            Object.keys(layer).forEach((key, index)=>{\n                //Si la capa que estamos extrayendo es la primera, extraemos el valor numerico asociado al codigo ASCII o \"key\"\n                //De lo contrario, si es una capa superior, debemos restar el punto de origen de las imagenes SPRITE usadas para\n                //hallar los frames originales.\n                const frame = numeroLayer === 0 ? layer[key] : layer[key] !== 0 && layer[key] !== \"0\" ? layer[key] - tilesetOrder[numeroLayer].firstgid + 1 : 0; // Obtener el frame correcto del tileMap\n                // Asegurar que tileMapping[index] existe como un objeto antes de asignar valores\n                if (!tileMapping[numeroLayer]) {\n                    tileMapping[numeroLayer] = {};\n                }\n                //Si la clave que se está evaluando no es cero, entonces quiere decir que tiene un sprite asociado y no es vacio\n                //Por lo que hacemos lo siguiente\n                if (key !== 0 && key !== \"0\") {\n                    //Al TileMapping (Mapa entre codigo ASCII y el SPRITE le asignamos el frame encontrado (menos una posicion porque TILED empieza en 1))\n                    tileMapping[numeroLayer][key] = ()=>[\n                            contextoKaplay.sprite(\"tiles-\".concat(numeroLayer + 1), {\n                                frame: frame - 1,\n                                width: anchoCuadrado,\n                                height: altoCuadrado\n                            }),\n                            contextoKaplay.scale(1)\n                        ];\n                } else {\n                    //De lo contrario si encuentra un cero, le asignamos una imagen especial transparente para cubrir el espacio vacio\n                    tileMapping[numeroLayer][key] = ()=>[\n                            contextoKaplay.sprite(\"title-0\", {\n                                width: anchoCuadrado,\n                                height: altoCuadrado\n                            })\n                        ];\n                }\n            });\n        });\n        /*\r\n        worldJson.layers.forEach((layer: any, numeroLayer: number) => {\r\n        \r\n          let resultadoMapa = [];\r\n          if (layer.type === \"tilelayer\" ) {\r\n            const { data, width } = layer;\r\n            const mapa = [];\r\n            for (let i = 0; i < width; i++) {\r\n              mapa.push(data.slice(i * width, (i + 1) * width));\r\n            }\r\n  \r\n            const resultadoMapeo = mapa.map((fila: any) =>\r\n              fila.map((cell: any) => cell.toString()).join(\"\")\r\n            );\r\n  \r\n            resultadoMapa = [...resultadoMapeo]\r\n  \r\n          \r\n            contextoKaplay.addLevel(resultadoMapa, {\r\n              tileWidth: anchoCuadrado,\r\n              tileHeight: altoCuadrado,\r\n              pos: configuracionMapa.pos,\r\n              tiles: { ...tileMapping[numeroLayer] },\r\n            })\r\n          }\r\n  \r\n  \r\n          \r\n          \r\n        })\r\n        */ console.log(\"SALI DE LA FUNCION\");\n        return \"Generación de mapa completada exitosamente\";\n    }).catch((error)=>{\n        console.error(error);\n    });\n    return \"resultado\";\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (generarEsquemaMapa);\nconst SCREEN_RESOLUTION_X = window.innerWidth;\nconst SCREEN_RESOLUTION_Y = window.innerHeight;\nconst TILED_MAP__WIDTH_NUMBER = 21;\nconst TILED_MAP_HEIGHT_NUMBER = 16;\nconst ORIGINAL_GAME_SCREEN_X = TILED_MAP__WIDTH_NUMBER * 32;\nconst ORIGINAL_GAME_SCREEN_Y = TILED_MAP_HEIGHT_NUMBER * 32;\nconst TILED_WIDTH = SCREEN_RESOLUTION_X / TILED_MAP__WIDTH_NUMBER;\nconst TILED_HEIGHT = SCREEN_RESOLUTION_Y / TILED_MAP_HEIGHT_NUMBER;\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/MapsGenerator.tsx\n"));

/***/ })

});